grammar Ruby
  rule root
    expressions
  end
  
  rule expressions
    expression others:(terminator expression)* <ExpressionsNode>
  end
  
  rule expression
    literal
    /
    self
    /
    assignment
    /
    call
  end
  
  # rule spaces
  #   ' '*
  # end
  
  rule terminator
    newline
    /
    ';'
  end
  
  rule newline
    "\n"
  end
  
  rule literal
    number
    /
    string
    /
    true
    /
    false
    /
    nil
  end
  
  rule number
    '-'? [1-9] [0-9]* <NumberNode>
  end
  
  rule string
    '"' (!'"' .)* '"' <StringNode>
    /
    "'" (!"'" .)* "'" <StringNode>
  end
  
  rule true
    'true'  <TrueNode>
  end
  
  rule false
    'false' <FalseNode>
  end
  
  rule nil
    'nil'   <NilNode>
  end

  rule self
    'self'  <SelfNode>
  end
  
  rule assignment
    identifier '=' expression   <AssignmentNode>
  end
  
  rule call
    receiver:(identifier '.')? method:identifier params:param_list?  <CallNode>
  end
  
  rule param_list
    '(' optional_params:(expression others:(',' expression)*)? ')' <ParamListNode>
  end

  rule identifier
    [a-z] [a-zA-Z0-9_]*  <IdentifierNode>
  end
end
