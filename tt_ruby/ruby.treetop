grammar Ruby
  rule root
    expressions
  end
  
  rule expressions
    expression others:(opt_spc terminator+ opt_spc expression)*   <ExpressionsNode>
  end
  
  rule expression
    operator_call
    /
    self
    /
    class
    /
    def
    /
    assignment
    /
    call
    /
    constant
    /
    literal
  end
  
  rule opt_spc
    ' '*
  end

  rule spc
    ' '+
  end
  
  rule terminator
    newline
    /
    delimiter
  end
  
  rule newline
    "\n"
  end
  
  rule delimiter
    ';'
  end
  
  rule literal
    number
    /
    string
    /
    true
    /
    false
    /
    nil
  end
  
  rule number
    '-'? [1-9] [0-9]*   <NumberNode>
  end
  
  rule string
    '"' [^"]* '"'   <StringNode>
    /
    "'" [^']* "'"   <StringNode>
  end
  
  rule true
    'true'  <TrueNode>
  end
  
  rule false
    'false'   <FalseNode>
  end
  
  rule nil
    'nil'   <NilNode>
  end

  rule self
    'self'  <SelfNode>
  end

  rule assignment
    opt_spc identifier opt_spc '=' opt_spc expression opt_spc   <AssignmentNode>
  end
  
  rule class
    opt_spc 'class' spc name:constant opt_spc parent:('<' opt_spc expression)? opt_spc terminator+
      opt_spc body:expressions opt_spc terminator+
    opt_spc 'end' opt_spc   <ClassNode> {
      def name
        super.text_value.to_sym
      end
      
      def parent
        super.expression unless super.empty?
      end
    }
  end
  
  rule def
    opt_spc 'def' spc name:identifier opt_spc params:('(' names:(opt_spc identifier others:(opt_spc ',' opt_spc identifier)*)? ')')? opt_spc terminator+
      opt_spc body:expressions opt_spc terminator+
    opt_spc 'end' opt_spc   <DefNode> {
      def name
        super.name
      end
      
      def params
        !super.empty? ? [super.names.identifier.name] + super.names.others.elements.map { |p| p.identifier.name } : []
      end
    }
  end

  rule call
    opt_spc receiver:(instance:(identifier / constant / literal) '.')? opt_spc method:identifier params:param_list? opt_spc  <CallNode> {
      def receiver
        super.instance unless super.empty?
      end
    }
  end
  
  rule param_list
    ((opt_spc '(') / spc) optional_params:(opt_spc expression others:(opt_spc ',' opt_spc expression)*)? opt_spc ')'? &{ |seq| ['()', ''].include?((seq[0].text_value + seq[3].text_value).strip) } opt_spc  <ParamListNode>
  end
  
  rule constant
    [A-Z] [a-zA-Z0-9_]*  <ConstantNode> {
      def name
        text_value.to_sym
      end
    }
  end 

  rule keyword
    'self' / 'true' / 'false' / 'nil' / 'class' / 'end'
  end

  rule identifier
    !keyword [a-z] [a-zA-Z0-9_]*  <IdentifierNode> {
      def name
        text_value.to_sym
      end
    }
  end
  
  rule operator
    [+\-*/!<>] {
      def name
        text_value.to_sym
      end
    }
  end
  
  rule operator_call
    opt_spc left:(call / constant / literal) operations:(opt_spc operator opt_spc right:(call / constant / literal))+ opt_spc    <OperatorCallNode>
  end
end
